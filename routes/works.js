import express from 'express';
import FolkloreWork from '../models/work.js';
import { verifyToken } from '../middleware/auth.js';

const router = express.Router();

// ‚ñ∂Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
router.post('/', verifyToken, async (req, res) => {
  try {
    const { title, content, genre_id, epoch_id } = req.body;

    if (!title || !content) {
      return res.status(400).json({ error: 'Title and content are required' });
    }

    const newWork = await FolkloreWork.create({
      title,
      content,
      genre_id,
      epoch_id,
    });

    res.status(201).json(newWork);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π
router.get('/', async (req, res) => {
  try {
    const works = await FolkloreWork.findAll();
    res.json(works);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const work = await FolkloreWork.findByPk(req.params.id);
    if (!work) {
      return res.status(404).json({ error: '–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    res.json(work);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ ID
router.put('/:id', verifyToken, async (req, res) => {
  try {
    const { title, content, genre_id, epoch_id } = req.body;
    const work = await FolkloreWork.findByPk(req.params.id);

    if (!work) {
      return res.status(404).json({ error: '–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    await work.update({ title, content, genre_id, epoch_id });
    res.json(work);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ ID
router.delete('/:id', async (req, res) => {
  try {
    const work = await FolkloreWork.findByPk(req.params.id);
    if (!work) {
      return res.status(404).json({ error: '–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    await work.destroy();
    res.json({ message: '–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
